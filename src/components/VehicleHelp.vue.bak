<script setup>
import NaviBar from "./NaviBar.vue";
import MarkdownIt from 'markdown-it';
import { useRoute } from "vue-router";
import { getResponse } from "../genai.js";
import { getVehicles } from "../vehicles.js";
import { ref, onMounted, computed } from 'vue';
import mermaid from 'mermaid';

// Initialize mermaid
mermaid.initialize({ startOnLoad: false });

// Get query params
const route = useRoute();
const details = route.query || {};

// Get vehicle data
// const vehicles = getVehicles();
// const vehicleIndex = Number(details.vehicleIndex);
// const vehicle = vehicles[vehicleIndex] || {};
const vehicle = details;
const issues = details.issues || "No issues provided";

// Status variables
const aiOutput = ref('');
const questions = ref([]);
const userAnswers = ref({});
const loading = ref(false);
const error = ref(null);
const step = ref('questions'); // 'questions' or 'flowchart'

// Helper to return a displayable value or a default placeholder
const formatField = (val, placeholder = "None") => {
  if (val === undefined || val === null) return placeholder;
  if (typeof val === "string") {
    return val.trim() === "" ? placeholder : val;
  }
  if (typeof val === "number") return isNaN(val) ? placeholder : String(val);
  return String(val);
};

// Helper to get feedback from the AI
const getFeedback = async () => {
  loading.value = true;
  error.value = null;
  const generateQuestionsPrompt = () => `Based on the following vehicle information and issue description, 
generate 3-5 multiple choice questions that would help clarify the problem. Format the response in JSON:
{
  "questions": [
    {
      "id": "q1",
      "text": "Question text here",
      "options": [
        { "id": "a", "text": "Option A" },
        { "id": "b", "text": "Option B" },
        ...
      ]
    },
    ...
  ]
}

Vehicle Information:
Year: ${formatField(vehicle.year)}
Make: ${formatField(vehicle.make)}
Model: ${formatField(vehicle.model)}
Trim: ${formatField(vehicle.trim)}
Issues: ${formatField(issues)}`;

  const generateFlowchartPrompt = () => `Based on the following vehicle information, issue description, and user responses,
generate a troubleshooting flowchart in Mermaid graph syntax. Use decision nodes to guide the diagnostic process.

Vehicle Information:
Year: ${formatField(vehicle.year)}
Make: ${formatField(vehicle.make)}
Model: ${formatField(vehicle.model)}
Trim: ${formatField(vehicle.trim)}
Issues: ${formatField(issues)}

User Responses:
${Object.entries(userAnswers.value)
  .map(([questionId, answer]) => {
    const question = questions.value.find(q => q.id === questionId);
    const option = question?.options.find(opt => opt.id === answer);
    return `${question?.text}: ${option?.text}`;
  })
  .join('\n')}

Response format should be:
\`\`\`mermaid
graph TD
  A[Start] --> B{First Check}
  B -->|Yes| C[Action 1]
  B -->|No| D[Action 2]
  ...
\`\`\`
`;

  try {
    // Get the AI response
    const resp = await getResponse(prompt);

    // Compile the Markdown to HTML
    const md = new MarkdownIt()
    aiOutput.value = computed(() => md.render(resp)).value || '';
  } catch (err) {
    error.value = err?.message || String(err);
  } finally {
    loading.value = false;
  }
}

onMounted(() => {
  // Fire the AI request when the page loads
  getFeedback();
});
</script>

<template>
  <div class="untree_co-section" id="features-section">
    <div class="container">
      <div style="max-width:800px;margin:20px auto;">
        <h2>Vehicle Help</h2>
        <p><strong>Vehicle:</strong> {{ vehicle.make || 'Unknown' }} {{ vehicle.model || '' }} ({{ vehicle.year || '' }})</p>
        <p><strong>Issues submitted:</strong> {{ issues }}</p>
        
        <div style="margin-top:1rem;">
          <!-- Show a loading indicator -->
          <div v-if="loading" class="loading">Loading...</div>

          <div v-else-if="error" class="error">Error: {{ error }}</div>

          <div v-else>
            <!-- Questions Section -->
            <div v-if="step === 'questions'" class="questions-section">
              <h3>Please Answer These Questions</h3>
              <div v-for="question in questions" :key="question.id" class="question-card">
                <p class="question-text">{{ question.text }}</p>
                <div class="options">
                  <div v-for="option in question.options" :key="option.id" 
                       class="option" 
                       :class="{ selected: userAnswers[question.id] === option.id }"
                       @click="handleAnswer(question.id, option.id)">
                    {{ option.text }}
                  </div>
                </div>
              </div>
              <button 
                @click="proceedToFlowchart" 
                :disabled="!canProceed"
                class="btn btn-primary mt-4">
                Generate Diagnostic Flowchart
              </button>
            </div>

            <!-- Flowchart Section -->
            <div v-else class="flowchart-section">
              <h3>Diagnostic Flowchart</h3>
              <div v-html="flowchartSvg" class="flowchart-container"></div>
              <button 
                @click="step = 'questions'" 
                class="btn btn-secondary mt-4">
                Back to Questions
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
.question-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  background-color: white;
}

.question-text {
  font-weight: 600;
  margin-bottom: 15px;
}

.options {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.option {
  padding: 10px 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.option:hover {
  background-color: #f5f5f5;
}

.option.selected {
  background-color: #007bff;
  color: white;
  border-color: #007bff;
}

.flowchart-container {
  margin: 20px 0;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: white;
  overflow-x: auto;
}

.loading {
  text-align: center;
  padding: 20px;
  font-style: italic;
}

.error {
  color: #dc3545;
  padding: 10px;
  border: 1px solid #dc3545;
  border-radius: 4px;
  margin-top: 10px;
}
</style>
